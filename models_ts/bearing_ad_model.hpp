// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace bearing_ad_model_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 54> locations_array__ =
  {" (found before start of program)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 10, column 4 to column 16)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 11, column 4 to column 15)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 12, column 4 to column 15)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 13, column 4 to column 14)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 14, column 4 to column 25)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 15, column 4 to column 30)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 29, column 4 to column 28)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 30, column 4 to column 28)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 31, column 4 to column 28)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 32, column 4 to column 28)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 33, column 4 to column 28)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 34, column 4 to column 28)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 38, column 4 to column 44)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 39, column 4 to column 51)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 42, column 8 to column 75)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 43, column 8 to column 80)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 41, column 21 to line 44, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 41, column 4 to line 44, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 48, column 4 to column 44)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 49, column 4 to column 51)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 52, column 8 to column 75)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 53, column 8 to column 80)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 51, column 21 to line 54, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 51, column 4 to line 54, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 58, column 8 to column 70)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 57, column 21 to line 59, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 57, column 4 to line 59, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 62, column 8 to column 70)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 61, column 21 to line 63, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 61, column 4 to line 63, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 20, column 4 to column 33)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 21, column 4 to column 36)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 24, column 8 to column 64)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 25, column 8 to column 65)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 23, column 21 to line 26, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 23, column 4 to line 26, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 2, column 3 to column 21)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 3, column 3 to column 21)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 4, column 10 to column 14)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 4, column 3 to column 23)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 5, column 10 to column 14)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 5, column 3 to column 23)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 6, column 10 to column 14)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 6, column 3 to column 23)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 7, column 10 to column 14)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 7, column 3 to column 23)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 15, column 24 to column 28)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 29, column 11 to column 15)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 30, column 11 to column 15)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 31, column 11 to column 15)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 32, column 11 to column 15)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 33, column 22 to column 26)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/bearing_ad_model.stan', line 34, column 22 to column 26)"};
class bearing_ad_model_model final : public model_base_crtp<bearing_ad_model_model> {
 private:
  int N_tr;
  int N_te;
  Eigen::Matrix<double,-1,1> acc_tr_data__;
  Eigen::Matrix<double,-1,1> rot_tr_data__;
  Eigen::Matrix<double,-1,1> acc_te_data__;
  Eigen::Matrix<double,-1,1> rot_te_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> acc_tr{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> rot_tr{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> acc_te{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> rot_te{nullptr, 0};
 public:
  ~bearing_ad_model_model() {}
  bearing_ad_model_model(stan::io::var_context& context__, unsigned int
                         random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "bearing_ad_model_model_namespace::bearing_ad_model_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 37;
      context__.validate_dims("data initialization", "N_tr", "int",
        std::vector<size_t>{});
      N_tr = std::numeric_limits<int>::min();
      current_statement__ = 37;
      N_tr = context__.vals_i("N_tr")[(1 - 1)];
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "N_tr", N_tr, 0);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "N_te", "int",
        std::vector<size_t>{});
      N_te = std::numeric_limits<int>::min();
      current_statement__ = 38;
      N_te = context__.vals_i("N_te")[(1 - 1)];
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "N_te", N_te, 0);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("acc_tr", "N_tr", N_tr);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "acc_tr", "double",
        std::vector<size_t>{static_cast<size_t>(N_tr)});
      acc_tr_data__ = Eigen::Matrix<double,-1,1>::Constant(N_tr,
                        std::numeric_limits<double>::quiet_NaN());
      new (&acc_tr)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(acc_tr_data__.data(), N_tr);
      {
        std::vector<local_scalar_t__> acc_tr_flat__;
        current_statement__ = 40;
        acc_tr_flat__ = context__.vals_r("acc_tr");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= N_tr; ++sym1__) {
          current_statement__ = 40;
          stan::model::assign(acc_tr, acc_tr_flat__[(pos__ - 1)],
            "assigning variable acc_tr", stan::model::index_uni(sym1__));
          current_statement__ = 40;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 41;
      stan::math::validate_non_negative_index("rot_tr", "N_tr", N_tr);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "rot_tr", "double",
        std::vector<size_t>{static_cast<size_t>(N_tr)});
      rot_tr_data__ = Eigen::Matrix<double,-1,1>::Constant(N_tr,
                        std::numeric_limits<double>::quiet_NaN());
      new (&rot_tr)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(rot_tr_data__.data(), N_tr);
      {
        std::vector<local_scalar_t__> rot_tr_flat__;
        current_statement__ = 42;
        rot_tr_flat__ = context__.vals_r("rot_tr");
        current_statement__ = 42;
        pos__ = 1;
        current_statement__ = 42;
        for (int sym1__ = 1; sym1__ <= N_tr; ++sym1__) {
          current_statement__ = 42;
          stan::model::assign(rot_tr, rot_tr_flat__[(pos__ - 1)],
            "assigning variable rot_tr", stan::model::index_uni(sym1__));
          current_statement__ = 42;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 43;
      stan::math::validate_non_negative_index("acc_te", "N_te", N_te);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "acc_te", "double",
        std::vector<size_t>{static_cast<size_t>(N_te)});
      acc_te_data__ = Eigen::Matrix<double,-1,1>::Constant(N_te,
                        std::numeric_limits<double>::quiet_NaN());
      new (&acc_te)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(acc_te_data__.data(), N_te);
      {
        std::vector<local_scalar_t__> acc_te_flat__;
        current_statement__ = 44;
        acc_te_flat__ = context__.vals_r("acc_te");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= N_te; ++sym1__) {
          current_statement__ = 44;
          stan::model::assign(acc_te, acc_te_flat__[(pos__ - 1)],
            "assigning variable acc_te", stan::model::index_uni(sym1__));
          current_statement__ = 44;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 45;
      stan::math::validate_non_negative_index("rot_te", "N_te", N_te);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "rot_te", "double",
        std::vector<size_t>{static_cast<size_t>(N_te)});
      rot_te_data__ = Eigen::Matrix<double,-1,1>::Constant(N_te,
                        std::numeric_limits<double>::quiet_NaN());
      new (&rot_te)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(rot_te_data__.data(), N_te);
      {
        std::vector<local_scalar_t__> rot_te_flat__;
        current_statement__ = 46;
        rot_te_flat__ = context__.vals_r("rot_te");
        current_statement__ = 46;
        pos__ = 1;
        current_statement__ = 46;
        for (int sym1__ = 1; sym1__ <= N_te; ++sym1__) {
          current_statement__ = 46;
          stan::model::assign(rot_te, rot_te_flat__[(pos__ - 1)],
            "assigning variable rot_te", stan::model::index_uni(sym1__));
          current_statement__ = 46;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 47;
      stan::math::validate_non_negative_index("sigma", "N_tr", N_tr);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("acc_tr_hat", "N_tr", N_tr);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("acc_te_hat", "N_te", N_te);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("log_lik_tr", "N_tr", N_tr);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("log_lik_te", "N_te", N_te);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("sigma_tr_hat", "N_tr", N_tr);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("sigma_te_hat", "N_te", N_te);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + N_tr;
  }
  inline std::string model_name() const final {
    return "bearing_ad_model_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = "};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "bearing_ad_model_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ alpha0 = DUMMY_VAR__;
      current_statement__ = 1;
      alpha0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 2;
      alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta0 = DUMMY_VAR__;
      current_statement__ = 3;
      beta0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 4;
      beta = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma0 = DUMMY_VAR__;
      current_statement__ = 5;
      sigma0 = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(N_tr, DUMMY_VAR__);
      current_statement__ = 6;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, N_tr);
      {
        current_statement__ = 31;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(
                         stan::model::rvalue(sigma, "sigma",
                           stan::model::index_uni(1)), 0, sigma0));
        current_statement__ = 32;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::model::rvalue(acc_tr, "acc_tr",
                           stan::model::index_uni(1)), 0,
                         stan::model::rvalue(sigma, "sigma",
                           stan::model::index_uni(1))));
        current_statement__ = 36;
        for (int n = 2; n <= N_tr; ++n) {
          current_statement__ = 33;
          lp_accum__.add(stan::math::cauchy_lpdf<propto__>(
                           stan::model::rvalue(sigma, "sigma",
                             stan::model::index_uni(n)), (alpha0 + (beta0 *
                           stan::model::rvalue(rot_tr, "rot_tr",
                             stan::model::index_uni((n - 1))))), sigma0));
          current_statement__ = 34;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(acc_tr, "acc_tr",
                             stan::model::index_uni(n)), (alpha + (beta *
                           stan::model::rvalue(acc_tr, "acc_tr",
                             stan::model::index_uni((n - 1))))),
                           stan::model::rvalue(sigma, "sigma",
                             stan::model::index_uni(n))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "bearing_ad_model_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double alpha0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      alpha0 = in__.template read<local_scalar_t__>();
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      alpha = in__.template read<local_scalar_t__>();
      double beta0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      beta0 = in__.template read<local_scalar_t__>();
      double beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      beta = in__.template read<local_scalar_t__>();
      double sigma0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      sigma0 = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      std::vector<double> sigma =
        std::vector<double>(N_tr, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                jacobian__>(0, lp__, N_tr);
      out__.write(alpha0);
      out__.write(alpha);
      out__.write(beta0);
      out__.write(beta);
      out__.write(sigma0);
      out__.write(sigma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> acc_tr_hat =
        Eigen::Matrix<double,-1,1>::Constant(N_tr,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> acc_te_hat =
        Eigen::Matrix<double,-1,1>::Constant(N_te,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_lik_tr =
        Eigen::Matrix<double,-1,1>::Constant(N_tr,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_lik_te =
        Eigen::Matrix<double,-1,1>::Constant(N_te,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> sigma_tr_hat =
        std::vector<double>(N_tr, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> sigma_te_hat =
        std::vector<double>(N_te, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      stan::model::assign(sigma_tr_hat,
        stan::math::cauchy_rng(0, sigma0, base_rng__),
        "assigning variable sigma_tr_hat", stan::model::index_uni(1));
      current_statement__ = 14;
      stan::model::assign(acc_tr_hat,
        stan::math::normal_rng(0,
          stan::model::rvalue(sigma_tr_hat, "sigma_tr_hat",
            stan::model::index_uni(1)), base_rng__),
        "assigning variable acc_tr_hat", stan::model::index_uni(1));
      current_statement__ = 18;
      for (int n = 2; n <= N_tr; ++n) {
        current_statement__ = 15;
        stan::model::assign(sigma_tr_hat,
          stan::math::normal_rng((alpha0 + (beta0 *
            stan::model::rvalue(rot_tr, "rot_tr",
              stan::model::index_uni((n - 1))))), sigma0, base_rng__),
          "assigning variable sigma_tr_hat", stan::model::index_uni(n));
        current_statement__ = 16;
        stan::model::assign(acc_tr_hat,
          stan::math::normal_rng((alpha + (beta *
            stan::model::rvalue(acc_tr, "acc_tr",
              stan::model::index_uni((n - 1))))),
            stan::model::rvalue(sigma_tr_hat, "sigma_tr_hat",
              stan::model::index_uni(n)), base_rng__),
          "assigning variable acc_tr_hat", stan::model::index_uni(n));
      }
      current_statement__ = 19;
      stan::model::assign(sigma_te_hat,
        stan::math::cauchy_rng(0, sigma0, base_rng__),
        "assigning variable sigma_te_hat", stan::model::index_uni(1));
      current_statement__ = 20;
      stan::model::assign(acc_te_hat,
        stan::math::normal_rng(0,
          stan::model::rvalue(sigma_te_hat, "sigma_te_hat",
            stan::model::index_uni(1)), base_rng__),
        "assigning variable acc_te_hat", stan::model::index_uni(1));
      current_statement__ = 24;
      for (int n = 2; n <= N_te; ++n) {
        current_statement__ = 21;
        stan::model::assign(sigma_te_hat,
          stan::math::normal_rng((alpha0 + (beta0 *
            stan::model::rvalue(rot_te, "rot_te",
              stan::model::index_uni((n - 1))))), sigma0, base_rng__),
          "assigning variable sigma_te_hat", stan::model::index_uni(n));
        current_statement__ = 22;
        stan::model::assign(acc_te_hat,
          stan::math::normal_rng((alpha + (beta *
            stan::model::rvalue(acc_te, "acc_te",
              stan::model::index_uni((n - 1))))),
            stan::model::rvalue(sigma_te_hat, "sigma_te_hat",
              stan::model::index_uni(n)), base_rng__),
          "assigning variable acc_te_hat", stan::model::index_uni(n));
      }
      current_statement__ = 27;
      for (int n = 1; n <= N_tr; ++n) {
        current_statement__ = 25;
        stan::model::assign(log_lik_tr,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(acc_tr, "acc_tr", stan::model::index_uni(n)),
            stan::model::rvalue(acc_tr_hat, "acc_tr_hat",
              stan::model::index_uni(n)), sigma),
          "assigning variable log_lik_tr", stan::model::index_uni(n));
      }
      current_statement__ = 30;
      for (int n = 1; n <= N_te; ++n) {
        current_statement__ = 28;
        stan::model::assign(log_lik_te,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(acc_te, "acc_te", stan::model::index_uni(n)),
            stan::model::rvalue(acc_te_hat, "acc_te_hat",
              stan::model::index_uni(n)), sigma),
          "assigning variable log_lik_te", stan::model::index_uni(n));
      }
      out__.write(acc_tr_hat);
      out__.write(acc_te_hat);
      out__.write(log_lik_tr);
      out__.write(log_lik_te);
      out__.write(sigma_tr_hat);
      out__.write(sigma_te_hat);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ alpha0 = DUMMY_VAR__;
      current_statement__ = 1;
      alpha0 = in__.read<local_scalar_t__>();
      out__.write(alpha0);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 2;
      alpha = in__.read<local_scalar_t__>();
      out__.write(alpha);
      local_scalar_t__ beta0 = DUMMY_VAR__;
      current_statement__ = 3;
      beta0 = in__.read<local_scalar_t__>();
      out__.write(beta0);
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 4;
      beta = in__.read<local_scalar_t__>();
      out__.write(beta);
      local_scalar_t__ sigma0 = DUMMY_VAR__;
      current_statement__ = 5;
      sigma0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma0);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(N_tr, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(sigma,
        in__.read<std::vector<local_scalar_t__>>(N_tr),
        "assigning variable sigma");
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha0", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "beta0", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "sigma0", "double",
        std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(N_tr)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ alpha0 = DUMMY_VAR__;
      current_statement__ = 1;
      alpha0 = context__.vals_r("alpha0")[(1 - 1)];
      out__.write(alpha0);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 2;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      out__.write(alpha);
      local_scalar_t__ beta0 = DUMMY_VAR__;
      current_statement__ = 3;
      beta0 = context__.vals_r("beta0")[(1 - 1)];
      out__.write(beta0);
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 4;
      beta = context__.vals_r("beta")[(1 - 1)];
      out__.write(beta);
      local_scalar_t__ sigma0 = DUMMY_VAR__;
      current_statement__ = 5;
      sigma0 = context__.vals_r("sigma0")[(1 - 1)];
      out__.write_free_lb(0, sigma0);
      std::vector<local_scalar_t__> sigma =
        std::vector<local_scalar_t__>(N_tr, DUMMY_VAR__);
      current_statement__ = 6;
      sigma = context__.vals_r("sigma");
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha0", "alpha", "beta0", "beta",
                "sigma0", "sigma"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"acc_tr_hat", "acc_te_hat", "log_lik_tr", "log_lik_te",
             "sigma_tr_hat", "sigma_te_hat"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(N_tr)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_tr)},
             std::vector<size_t>{static_cast<size_t>(N_te)},
             std::vector<size_t>{static_cast<size_t>(N_tr)},
             std::vector<size_t>{static_cast<size_t>(N_te)},
             std::vector<size_t>{static_cast<size_t>(N_tr)},
             std::vector<size_t>{static_cast<size_t>(N_te)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "alpha0");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta0");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "sigma0");
    for (int sym1__ = 1; sym1__ <= N_tr; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_tr; ++sym1__) {
        param_names__.emplace_back(std::string() + "acc_tr_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_te; ++sym1__) {
        param_names__.emplace_back(std::string() + "acc_te_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_tr; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik_tr" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_te; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik_te" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_tr; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_tr_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_te; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_te_hat" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "alpha0");
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta0");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "sigma0");
    for (int sym1__ = 1; sym1__ <= N_tr; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_tr; ++sym1__) {
        param_names__.emplace_back(std::string() + "acc_tr_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_te; ++sym1__) {
        param_names__.emplace_back(std::string() + "acc_te_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_tr; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik_tr" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_te; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik_te" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_tr; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_tr_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_te; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_te_hat" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_tr) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"acc_tr_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_tr) + "},\"block\":\"generated_quantities\"},{\"name\":\"acc_te_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_te) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_tr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_tr) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_te\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_te) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma_tr_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_tr) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"sigma_te_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_te) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_tr) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"acc_tr_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_tr) + "},\"block\":\"generated_quantities\"},{\"name\":\"acc_te_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_te) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_tr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_tr) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_te\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_te) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma_tr_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_tr) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"sigma_te_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_te) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((1 + 1) + 1) + 1) + 1) + N_tr);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((((((N_tr
      + N_te) + N_tr) + N_te) + N_tr) + N_te));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((1 + 1) + 1) + 1) + 1) + N_tr);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((((((N_tr
      + N_te) + N_tr) + N_te) + N_tr) + N_te));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = bearing_ad_model_model_namespace::bearing_ad_model_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return bearing_ad_model_model_namespace::profiles__;
}
#endif