// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace co2_structual_time_series_v2_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 44> locations_array__ =
  {" (found before start of program)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 10, column 4 to column 22)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 11, column 4 to column 22)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 12, column 4 to column 22)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 14, column 4 to column 20)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 15, column 4 to column 23)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 19, column 4 to column 23)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 42, column 4 to column 26)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 43, column 4 to column 26)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 45, column 4 to column 29)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 46, column 4 to column 32)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 23, column 4 to column 23)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 49, column 4 to column 32)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 50, column 4 to column 38)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 58, column 12 to column 67)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 59, column 12 to column 79)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 60, column 12 to column 73)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 57, column 13 to line 61, column 9)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 55, column 12 to column 68)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 53, column 22 to line 56, column 9)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 53, column 8 to line 61, column 9)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 52, column 28 to line 62, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 52, column 4 to line 62, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 29, column 8 to column 47)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 28, column 20 to line 30, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 28, column 4 to line 30, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 34, column 8 to column 59)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 33, column 20 to line 35, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 33, column 4 to line 35, column 5)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 38, column 4 to column 30)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 2, column 4 to column 22)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 3, column 11 to column 15)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 3, column 4 to column 22)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 4, column 4 to column 22)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 5, column 11 to column 15)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 5, column 4 to column 22)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 6, column 4 to column 19)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 14, column 11 to column 15)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 15, column 11 to column 15)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 19, column 11 to column 15)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 42, column 11 to column 15)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 43, column 11 to column 15)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 45, column 11 to column 20)",
  " (in '/home/karinog/work/study/bayesian-time-series-anomaly-detection/models_ts/co2_structual-time-series_v2.stan', line 46, column 11 to column 20)"};
class co2_structual_time_series_v2_model final : public model_base_crtp<co2_structual_time_series_v2_model> {
 private:
  int T_tr;
  Eigen::Matrix<double,-1,1> y_tr_data__;
  int T_te;
  Eigen::Matrix<double,-1,1> y_te_data__;
  int S;
  int mu_hat_1dim__;
  int gamma_hat_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y_tr{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y_te{nullptr, 0};
 public:
  ~co2_structual_time_series_v2_model() {}
  co2_structual_time_series_v2_model(stan::io::var_context& context__,
                                     unsigned int random_seed__ = 0,
                                     std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "co2_structual_time_series_v2_model_namespace::co2_structual_time_series_v2_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 30;
      context__.validate_dims("data initialization", "T_tr", "int",
        std::vector<size_t>{});
      T_tr = std::numeric_limits<int>::min();
      current_statement__ = 30;
      T_tr = context__.vals_i("T_tr")[(1 - 1)];
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "T_tr", T_tr, 0);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("y_tr", "T_tr", T_tr);
      current_statement__ = 32;
      context__.validate_dims("data initialization", "y_tr", "double",
        std::vector<size_t>{static_cast<size_t>(T_tr)});
      y_tr_data__ = Eigen::Matrix<double,-1,1>::Constant(T_tr,
                      std::numeric_limits<double>::quiet_NaN());
      new (&y_tr) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_tr_data__.data(),
        T_tr);
      {
        std::vector<local_scalar_t__> y_tr_flat__;
        current_statement__ = 32;
        y_tr_flat__ = context__.vals_r("y_tr");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= T_tr; ++sym1__) {
          current_statement__ = 32;
          stan::model::assign(y_tr, y_tr_flat__[(pos__ - 1)],
            "assigning variable y_tr", stan::model::index_uni(sym1__));
          current_statement__ = 32;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 33;
      context__.validate_dims("data initialization", "T_te", "int",
        std::vector<size_t>{});
      T_te = std::numeric_limits<int>::min();
      current_statement__ = 33;
      T_te = context__.vals_i("T_te")[(1 - 1)];
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "T_te", T_te, 0);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("y_te", "T_te", T_te);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "y_te", "double",
        std::vector<size_t>{static_cast<size_t>(T_te)});
      y_te_data__ = Eigen::Matrix<double,-1,1>::Constant(T_te,
                      std::numeric_limits<double>::quiet_NaN());
      new (&y_te) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_te_data__.data(),
        T_te);
      {
        std::vector<local_scalar_t__> y_te_flat__;
        current_statement__ = 35;
        y_te_flat__ = context__.vals_r("y_te");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= T_te; ++sym1__) {
          current_statement__ = 35;
          stan::model::assign(y_te, y_te_flat__[(pos__ - 1)],
            "assigning variable y_te", stan::model::index_uni(sym1__));
          current_statement__ = 35;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 36;
      context__.validate_dims("data initialization", "S", "int",
        std::vector<size_t>{});
      S = std::numeric_limits<int>::min();
      current_statement__ = 36;
      S = context__.vals_i("S")[(1 - 1)];
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "S", S, 0);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("mu", "T_tr", T_tr);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("gamma", "T_tr", T_tr);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("alpha", "T_tr", T_tr);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("y_tr_hat", "T_tr", T_tr);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("y_te_hat", "T_te", T_te);
      current_statement__ = 42;
      mu_hat_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 42;
      mu_hat_1dim__ = (T_tr + T_te);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("mu_hat", "T_tr + T_te",
        mu_hat_1dim__);
      current_statement__ = 43;
      gamma_hat_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 43;
      gamma_hat_1dim__ = (T_tr + T_te);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("gamma_hat", "T_tr + T_te",
        gamma_hat_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + T_tr + T_tr;
  }
  inline std::string model_name() const final {
    return "co2_structual_time_series_v2_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = "};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "co2_structual_time_series_v2_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ s_z = DUMMY_VAR__;
      current_statement__ = 1;
      s_z = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      local_scalar_t__ s_v = DUMMY_VAR__;
      current_statement__ = 2;
      s_v = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      local_scalar_t__ s_s = DUMMY_VAR__;
      current_statement__ = 3;
      s_s = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T_tr, DUMMY_VAR__);
      current_statement__ = 4;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(T_tr);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T_tr, DUMMY_VAR__);
      current_statement__ = 5;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(T_tr);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T_tr, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(alpha, stan::math::add(mu, gamma),
        "assigning variable alpha");
      {
        current_statement__ = 25;
        for (int i = 3; i <= T_tr; ++i) {
          current_statement__ = 23;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(mu, "mu",
                             stan::model::index_uni(i)), ((2 *
                           stan::model::rvalue(mu, "mu",
                             stan::model::index_uni((i - 1)))) -
                           stan::model::rvalue(mu, "mu",
                             stan::model::index_uni((i - 2)))), s_z));
        }
        current_statement__ = 28;
        for (int i = S; i <= T_tr; ++i) {
          current_statement__ = 26;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(gamma, "gamma",
                             stan::model::index_uni(i)),
                           -stan::math::sum(
                              stan::model::rvalue(gamma, "gamma",
                                stan::model::index_min_max(((i - S) + 1), (i
                                  - 1)))), s_s));
        }
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y_tr, alpha, s_v));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "co2_structual_time_series_v2_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double s_z = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      s_z = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      double s_v = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      s_v = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      double s_s = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      s_s = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(T_tr,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(T_tr);
      Eigen::Matrix<double,-1,1> gamma =
        Eigen::Matrix<double,-1,1>::Constant(T_tr,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(T_tr);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(T_tr,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(s_z);
      out__.write(s_v);
      out__.write(s_s);
      out__.write(mu);
      out__.write(gamma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 11;
      stan::model::assign(alpha, stan::math::add(mu, gamma),
        "assigning variable alpha");
      if (emit_transformed_parameters__) {
        out__.write(alpha);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> y_tr_hat =
        Eigen::Matrix<double,-1,1>::Constant(T_tr,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> y_te_hat =
        Eigen::Matrix<double,-1,1>::Constant(T_te,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu_hat =
        Eigen::Matrix<double,-1,1>::Constant(mu_hat_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> gamma_hat =
        Eigen::Matrix<double,-1,1>::Constant(gamma_hat_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      stan::model::assign(mu_hat,
        stan::model::rvalue(mu, "mu", stan::model::index_min_max(1, T_tr)),
        "assigning variable mu_hat", stan::model::index_min_max(1, T_tr));
      current_statement__ = 13;
      stan::model::assign(gamma_hat,
        stan::model::rvalue(gamma, "gamma",
          stan::model::index_min_max(1, T_tr)),
        "assigning variable gamma_hat", stan::model::index_min_max(1, T_tr));
      current_statement__ = 22;
      for (int t = 2; t <= (T_tr + T_te); ++t) {
        current_statement__ = 20;
        if (stan::math::logical_lte(t, T_tr)) {
          current_statement__ = 18;
          stan::model::assign(y_tr_hat,
            stan::math::normal_rng(
              (stan::model::rvalue(mu_hat, "mu_hat",
                 stan::model::index_uni(t)) +
              stan::model::rvalue(gamma_hat, "gamma_hat",
                stan::model::index_uni(t))), s_v, base_rng__),
            "assigning variable y_tr_hat", stan::model::index_uni(t));
        } else {
          current_statement__ = 14;
          stan::model::assign(mu_hat,
            stan::math::normal_rng(((2 *
              stan::model::rvalue(mu_hat, "mu_hat",
                stan::model::index_uni((t - 1)))) -
              stan::model::rvalue(mu_hat, "mu_hat",
                stan::model::index_uni((t - 2)))), s_z, base_rng__),
            "assigning variable mu_hat", stan::model::index_uni(t));
          current_statement__ = 15;
          stan::model::assign(gamma_hat,
            stan::math::normal_rng((-1 *
              stan::math::sum(
                stan::model::rvalue(gamma_hat, "gamma_hat",
                  stan::model::index_min_max(((t - S) + 1), (t - 1))))), s_s,
              base_rng__), "assigning variable gamma_hat",
            stan::model::index_uni(t));
          current_statement__ = 16;
          stan::model::assign(y_te_hat,
            stan::math::normal_rng(
              (stan::model::rvalue(mu_hat, "mu_hat",
                 stan::model::index_uni(t)) +
              stan::model::rvalue(gamma_hat, "gamma_hat",
                stan::model::index_uni(t))), s_v, base_rng__),
            "assigning variable y_te_hat", stan::model::index_uni((t - T_tr)));
        }
      }
      out__.write(y_tr_hat);
      out__.write(y_te_hat);
      out__.write(mu_hat);
      out__.write(gamma_hat);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ s_z = DUMMY_VAR__;
      current_statement__ = 1;
      s_z = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_z);
      local_scalar_t__ s_v = DUMMY_VAR__;
      current_statement__ = 2;
      s_v = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_v);
      local_scalar_t__ s_s = DUMMY_VAR__;
      current_statement__ = 3;
      s_s = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, s_s);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T_tr, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(T_tr),
        "assigning variable mu");
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T_tr, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(gamma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(T_tr),
        "assigning variable gamma");
      out__.write(gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "s_z", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "s_v", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "s_s", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{static_cast<size_t>(T_tr)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{static_cast<size_t>(T_tr)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ s_z = DUMMY_VAR__;
      current_statement__ = 1;
      s_z = context__.vals_r("s_z")[(1 - 1)];
      out__.write_free_lb(0, s_z);
      local_scalar_t__ s_v = DUMMY_VAR__;
      current_statement__ = 2;
      s_v = context__.vals_r("s_v")[(1 - 1)];
      out__.write_free_lb(0, s_v);
      local_scalar_t__ s_s = DUMMY_VAR__;
      current_statement__ = 3;
      s_s = context__.vals_r("s_s")[(1 - 1)];
      out__.write_free_lb(0, s_s);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T_tr, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 4;
        mu_flat__ = context__.vals_r("mu");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= T_tr; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(mu, mu_flat__[(pos__ - 1)],
            "assigning variable mu", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T_tr, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma_flat__;
        current_statement__ = 5;
        gamma_flat__ = context__.vals_r("gamma");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= T_tr; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(gamma, gamma_flat__[(pos__ - 1)],
            "assigning variable gamma", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"s_z", "s_v", "s_s", "mu", "gamma"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"alpha"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"y_tr_hat", "y_te_hat", "mu_hat", "gamma_hat"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(T_tr)},
                std::vector<size_t>{static_cast<size_t>(T_tr)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(T_tr)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(T_tr)},
             std::vector<size_t>{static_cast<size_t>(T_te)},
             std::vector<size_t>{static_cast<size_t>(mu_hat_1dim__)},
             std::vector<size_t>{static_cast<size_t>(gamma_hat_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "s_z");
    param_names__.emplace_back(std::string() + "s_v");
    param_names__.emplace_back(std::string() + "s_s");
    for (int sym1__ = 1; sym1__ <= T_tr; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= T_tr; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= T_tr; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= T_tr; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_tr_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= T_te; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_te_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= mu_hat_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= gamma_hat_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "gamma_hat" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "s_z");
    param_names__.emplace_back(std::string() + "s_v");
    param_names__.emplace_back(std::string() + "s_s");
    for (int sym1__ = 1; sym1__ <= T_tr; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= T_tr; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= T_tr; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= T_tr; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_tr_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= T_te; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_te_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= mu_hat_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_hat" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= gamma_hat_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "gamma_hat" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"s_z\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_s\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T_tr) + "},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T_tr) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T_tr) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_tr_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T_tr) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_te_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T_te) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_hat_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"gamma_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gamma_hat_1dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"s_z\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_s\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T_tr) + "},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T_tr) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T_tr) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_tr_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T_tr) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_te_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T_te) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_hat_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"gamma_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gamma_hat_1dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + 1) + T_tr) + T_tr);
    const size_t num_transformed = emit_transformed_parameters * (T_tr);
    const size_t num_gen_quantities = emit_generated_quantities * ((((T_tr +
      T_te) + mu_hat_1dim__) + gamma_hat_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + 1) + T_tr) + T_tr);
    const size_t num_transformed = emit_transformed_parameters * (T_tr);
    const size_t num_gen_quantities = emit_generated_quantities * ((((T_tr +
      T_te) + mu_hat_1dim__) + gamma_hat_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = co2_structual_time_series_v2_model_namespace::co2_structual_time_series_v2_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return co2_structual_time_series_v2_model_namespace::profiles__;
}
#endif